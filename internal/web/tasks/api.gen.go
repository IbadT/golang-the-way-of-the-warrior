// Package tasks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package tasks

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Task defines model for Task.
type Task struct {
	Id     *openapi_types.UUID `json:"id,omitempty"`
	IsDone *bool               `json:"is_done,omitempty"`
	Title  *string             `json:"title,omitempty"`
}

// TaskRequest defines model for TaskRequest.
type TaskRequest struct {
	Title string `json:"title"`
}

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	IsDone *bool `form:"is_done,omitempty" json:"is_done,omitempty"`
}

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = TaskRequest

// UpdateTaskByIDJSONRequestBody defines body for UpdateTaskByID for application/json ContentType.
type UpdateTaskByIDJSONRequestBody = TaskRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(ctx echo.Context, params GetTasksParams) error
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx echo.Context) error
	// Delete task by id
	// (DELETE /tasks/{id})
	DeleteTaskById(ctx echo.Context, id openapi_types.UUID) error
	// Get task by ID
	// (GET /tasks/{id})
	GetTaskByID(ctx echo.Context, id openapi_types.UUID) error
	// Update completed task
	// (PATCH /tasks/{id})
	UpdateTaskCompletedById(ctx echo.Context, id openapi_types.UUID) error
	// Update title task
	// (PUT /tasks/{id})
	UpdateTaskByID(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams
	// ------------- Optional query parameter "is_done" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_done", ctx.QueryParams(), &params.IsDone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_done: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTasks(ctx, params)
	return err
}

// PostTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasks(ctx)
	return err
}

// DeleteTaskById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTaskById(ctx, id)
	return err
}

// GetTaskByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTaskByID(ctx, id)
	return err
}

// UpdateTaskCompletedById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTaskCompletedById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTaskCompletedById(ctx, id)
	return err
}

// UpdateTaskByID converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTaskByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTaskByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(baseURL+"/tasks/:id", wrapper.DeleteTaskById)
	router.GET(baseURL+"/tasks/:id", wrapper.GetTaskByID)
	router.PATCH(baseURL+"/tasks/:id", wrapper.UpdateTaskCompletedById)
	router.PUT(baseURL+"/tasks/:id", wrapper.UpdateTaskByID)

}

type GetTasksRequestObject struct {
	Params GetTasksParams
}

type GetTasksResponseObject interface {
	VisitGetTasksResponse(w http.ResponseWriter) error
}

type GetTasks200JSONResponse []Task

func (response GetTasks200JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksRequestObject struct {
	Body *PostTasksJSONRequestBody
}

type PostTasksResponseObject interface {
	VisitPostTasksResponse(w http.ResponseWriter) error
}

type PostTasks201JSONResponse Task

func (response PostTasks201JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTaskByIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteTaskByIdResponseObject interface {
	VisitDeleteTaskByIdResponse(w http.ResponseWriter) error
}

type DeleteTaskById204Response struct {
}

func (response DeleteTaskById204Response) VisitDeleteTaskByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetTaskByIDRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetTaskByIDResponseObject interface {
	VisitGetTaskByIDResponse(w http.ResponseWriter) error
}

type GetTaskByID200JSONResponse Task

func (response GetTaskByID200JSONResponse) VisitGetTaskByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTaskCompletedByIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type UpdateTaskCompletedByIdResponseObject interface {
	VisitUpdateTaskCompletedByIdResponse(w http.ResponseWriter) error
}

type UpdateTaskCompletedById200JSONResponse Task

func (response UpdateTaskCompletedById200JSONResponse) VisitUpdateTaskCompletedByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTaskByIDRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateTaskByIDJSONRequestBody
}

type UpdateTaskByIDResponseObject interface {
	VisitUpdateTaskByIDResponse(w http.ResponseWriter) error
}

type UpdateTaskByID200JSONResponse Task

func (response UpdateTaskByID200JSONResponse) VisitUpdateTaskByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(ctx context.Context, request GetTasksRequestObject) (GetTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx context.Context, request PostTasksRequestObject) (PostTasksResponseObject, error)
	// Delete task by id
	// (DELETE /tasks/{id})
	DeleteTaskById(ctx context.Context, request DeleteTaskByIdRequestObject) (DeleteTaskByIdResponseObject, error)
	// Get task by ID
	// (GET /tasks/{id})
	GetTaskByID(ctx context.Context, request GetTaskByIDRequestObject) (GetTaskByIDResponseObject, error)
	// Update completed task
	// (PATCH /tasks/{id})
	UpdateTaskCompletedById(ctx context.Context, request UpdateTaskCompletedByIdRequestObject) (UpdateTaskCompletedByIdResponseObject, error)
	// Update title task
	// (PUT /tasks/{id})
	UpdateTaskByID(ctx context.Context, request UpdateTaskByIDRequestObject) (UpdateTaskByIDResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetTasks operation middleware
func (sh *strictHandler) GetTasks(ctx echo.Context, params GetTasksParams) error {
	var request GetTasksRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasks(ctx.Request().Context(), request.(GetTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTasksResponseObject); ok {
		return validResponse.VisitGetTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasks operation middleware
func (sh *strictHandler) PostTasks(ctx echo.Context) error {
	var request PostTasksRequestObject

	var body PostTasksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasks(ctx.Request().Context(), request.(PostTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksResponseObject); ok {
		return validResponse.VisitPostTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTaskById operation middleware
func (sh *strictHandler) DeleteTaskById(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteTaskByIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTaskById(ctx.Request().Context(), request.(DeleteTaskByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTaskById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTaskByIdResponseObject); ok {
		return validResponse.VisitDeleteTaskByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTaskByID operation middleware
func (sh *strictHandler) GetTaskByID(ctx echo.Context, id openapi_types.UUID) error {
	var request GetTaskByIDRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTaskByID(ctx.Request().Context(), request.(GetTaskByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTaskByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTaskByIDResponseObject); ok {
		return validResponse.VisitGetTaskByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateTaskCompletedById operation middleware
func (sh *strictHandler) UpdateTaskCompletedById(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateTaskCompletedByIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTaskCompletedById(ctx.Request().Context(), request.(UpdateTaskCompletedByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTaskCompletedById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateTaskCompletedByIdResponseObject); ok {
		return validResponse.VisitUpdateTaskCompletedByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateTaskByID operation middleware
func (sh *strictHandler) UpdateTaskByID(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateTaskByIDRequestObject

	request.Id = id

	var body UpdateTaskByIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTaskByID(ctx.Request().Context(), request.(UpdateTaskByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTaskByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateTaskByIDResponseObject); ok {
		return validResponse.VisitUpdateTaskByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
