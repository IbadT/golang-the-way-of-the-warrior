package main

import (
	"net/http"

	"github.com/IbadT/golang-the-way-of-the-warrior.git/handlers"
)

func main() {
	http.HandleFunc("/tasks", handlers.GetTasks)
	http.HandleFunc("/task-id", handlers.GetTaskById)

	http.HandleFunc("/create/task", handlers.CreateTask)

	http.HandleFunc("/update/task", handlers.UpdateTaskById)
	http.HandleFunc("/update/task/completed", handlers.UpdateTaskCompletedById)

	http.HandleFunc("/delete/task-id", handlers.DeleteTaskById)

	http.HandleFunc("/", handlers.GetUsers)
	http.HandleFunc("/users", handlers.GetUsersByName)
	// http.HandleFunc("/:id", handlers.GetUserById)
	http.HandleFunc("/user", handlers.CreateUser)
	// http.HandleFunc("/patch/user/:id", handlers.UpdateUserById)
	// http.HandleFunc("/delete/user/:id", handlers.DeleteUserById)

	http.ListenAndServe("localhost:8080", nil)
}

// go list -m

//

// - **–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É `Order` —Å –ø–æ–ª—è–º–∏:**
//     - `ID` (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞),
//     - `Quantity` (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç).
// - **–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `supplier(ordersChan chan<- Order)` ‚Äî —ç—Ç–æ –≤–∞—à ¬´–ø–æ—Å—Ç–∞–≤—â–∏–∫¬ª:**
//     - –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è (–±—É–¥—É—â–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞) –≤ —Ü–∏–∫–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ (—Å–∫–∞–∂–µ–º, 5) –∑–∞–∫–∞–∑–æ–≤ –≤ –∫–∞–Ω–∞–ª `ordersChan`, —É–∫–∞–∑—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è `ID` –∏ `Quantity`.
//     - –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ **–∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ** –∫–∞–Ω–∞–ª `ordersChan` (–æ–ø–µ—Ä–∞—Ü–∏—è `close(ordersChan)`), —Å–æ–æ–±—â–∞—è, —á—Ç–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç.
// - **–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `warehouse(ordersChan <-chan Order, resultsChan chan<- string)` ‚Äî —ç—Ç–æ –≤–∞—à ¬´—Å–∫–ª–∞–¥¬ª:**
//     - –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ **–ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è**, –Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ `go warehouse(...)` –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç ¬´–≥–æ—Ä—É—Ç–∏–Ω–æ–π-—Å–∫–ª–∞–¥–æ–º¬ª, —Ä–∞–±–æ—Ç–∞—é—â–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
//     - –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–Ω—ã–π ¬´–æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 —à—Ç—É–∫).
//     - –° –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ `for order := range ordersChan` —Å—á–∏—Ç–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –∏–∑ –∫–∞–Ω–∞–ª–∞:
//         - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤—ã—á–∏—Ç–∞–π—Ç–µ `order.Quantity` –∏–∑ –æ—Å—Ç–∞—Ç–∫–∞ –∏ –ø–∏—à–∏—Ç–µ –≤ `resultsChan` —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ `"Order <ID> processed, left <–æ—Å—Ç–∞—Ç–æ–∫> items"`.
//         - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –ø–∏—à–∏—Ç–µ –≤ `resultsChan` —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ `"Order <ID> rejected: not enough items"`.
//     - –ö–æ–≥–¥–∞ –∫–∞–Ω–∞–ª `ordersChan` –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Ü–∏–∫–ª `for range` –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ **–∑–∞–∫—Ä–æ–π—Ç–µ** `resultsChan`,
// 		—á—Ç–æ–±—ã ¬´—Å–∫–∞–∑–∞—Ç—å¬ª —á–∏—Ç–∞—é—â–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç.
// - **–í —Ñ—É–Ω–∫—Ü–∏–∏ `main()`:**
//     - –û–±—ä—è–≤–∏—Ç–µ –¥–≤–∞ –∫–∞–Ω–∞–ª–∞: `ordersChan := make(chan Order)` –∏ `resultsChan := make(chan string)`.
//     - **–ó–∞–ø—É—Å—Ç–∏—Ç–µ** ¬´–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞¬ª (—Ñ—É–Ω–∫—Ü–∏—é `supplier`) —á–µ—Ä–µ–∑ `go supplier(ordersChan)`.
//     - **–ó–∞–ø—É—Å—Ç–∏—Ç–µ** ¬´—Å–∫–ª–∞–¥¬ª (—Ñ—É–Ω–∫—Ü–∏—é `warehouse`) —á–µ—Ä–µ–∑ `go warehouse(ordersChan, resultsChan)`.
//     - –í `main()` —Å–¥–µ–ª–∞–π—Ç–µ —Ü–∏–∫–ª `for msg := range resultsChan`, –≥–¥–µ `msg` ‚Äî —Å—Ç—Ä–æ–∫–∏, –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –æ—Ç ¬´—Å–∫–ª–∞–¥–∞¬ª. –í—ã–≤–æ–¥–∏—Ç–µ –∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å.
//     - –ö–æ–≥–¥–∞ –∫–∞–Ω–∞–ª `resultsChan` –∑–∞–∫—Ä–æ–µ—Ç—Å—è, —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ä–∞–±–æ—Ç—É.
// - **(–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ) –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏:**
//     - –í `supplier` –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Äî `time.Sleep(300 * time.Millisecond)`.
//     - –í `warehouse` –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–∫–∞–∑–∞ ‚Äî `time.Sleep(500 * time.Millisecond)`.

//

// type Person struct {
// 	ID   int
// 	Name string
// }

// func main() {
// 	chanLen := 2
// 	personsChan := make(chan Person, chanLen)

// 	persons := []Person{
// 		{ID: 1, Name: "John"},
// 		{ID: 2, Name: "Eduard"},
// 		{ID: 3, Name: "Brew"},
// 		{ID: 4, Name: "Matwey"},
// 		{ID: 5, Name: "Andrew"},
// 	}

// 	for index, person := range persons {
// 		if index+1 <= chanLen {
// 			personsChan <- person
// 		} else {
// 			break
// 		}
// 	}

// 	close(personsChan)

// 	fmt.Println(<-personsChan)
// 	fmt.Println(<-personsChan)
// }

// func main() {
// 	mailboxOne := make(chan int)
// 	mailboxTwo := make(chan int)

// 	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
// 	go func() {
// 		for value := range 20 {
// 			if value%2 == 0 {
// 				mailboxTwo <- value
// 			} else {
// 				mailboxOne <- value
// 			}
// 			time.Sleep(time.Millisecond * 100) // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
// 		}
// 		close(mailboxOne)
// 		close(mailboxTwo)
// 	}()

// 	// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–∫–∞ –æ–Ω–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã
// 	for mailboxOne != nil || mailboxTwo != nil {
// 		select {
// 		case msg, ok := <-mailboxOne:
// 			if ok {
// 				fmt.Println("üì¨ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ mailboxOne:", msg)
// 			} else {
// 				mailboxOne = nil // –û—á–∏—â–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
// 			}
// 		case msg, ok := <-mailboxTwo:
// 			if ok {
// 				fmt.Println("üì¨ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ mailboxTwo:", msg)
// 			} else {
// 				mailboxTwo = nil // –û—á–∏—â–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
// 			}
// 		default:
// 			time.Sleep(100 * time.Millisecond) // –ñ–¥—ë–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
// 		}
// 	}

// 	fmt.Println("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É.")
// }

// // - **–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É `Order` —Å –ø–æ–ª—è–º–∏:**
// //     - `ID` (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞),
// //     - `Quantity` (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç).
// // - **–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `supplier(ordersChan chan<- Order)` ‚Äî —ç—Ç–æ –≤–∞—à ¬´–ø–æ—Å—Ç–∞–≤—â–∏–∫¬ª:**
// //     - –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è (–±—É–¥—É—â–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞) –≤ —Ü–∏–∫–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ (—Å–∫–∞–∂–µ–º, 5) –∑–∞–∫–∞–∑–æ–≤ –≤ –∫–∞–Ω–∞–ª `ordersChan`, —É–∫–∞–∑—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è `ID` –∏ `Quantity`.
// //     - –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ **–∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ** –∫–∞–Ω–∞–ª `ordersChan` (–æ–ø–µ—Ä–∞—Ü–∏—è `close(ordersChan)`), —Å–æ–æ–±—â–∞—è, —á—Ç–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç.
// // - **–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `warehouse(ordersChan <-chan Order, resultsChan chan<- string)` ‚Äî —ç—Ç–æ –≤–∞—à ¬´—Å–∫–ª–∞–¥¬ª:**
// //     - –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ **–ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è**, –Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ `go warehouse(...)` –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç ¬´–≥–æ—Ä—É—Ç–∏–Ω–æ–π-—Å–∫–ª–∞–¥–æ–º¬ª, —Ä–∞–±–æ—Ç–∞—é—â–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
// //     - –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–Ω—ã–π ¬´–æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 —à—Ç—É–∫).
// //     - –° –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ `for order := range ordersChan` —Å—á–∏—Ç–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –∏–∑ –∫–∞–Ω–∞–ª–∞:
// //         - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤—ã—á–∏—Ç–∞–π—Ç–µ `order.Quantity` –∏–∑ –æ—Å—Ç–∞—Ç–∫–∞ –∏ –ø–∏—à–∏—Ç–µ –≤ `resultsChan` —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ `"Order <ID> processed, left <–æ—Å—Ç–∞—Ç–æ–∫> items"`.
// //         - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –ø–∏—à–∏—Ç–µ –≤ `resultsChan` —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ `"Order <ID> rejected: not enough items"`.
// //     - –ö–æ–≥–¥–∞ –∫–∞–Ω–∞–ª `ordersChan` –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Ü–∏–∫–ª `for range` –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ **–∑–∞–∫—Ä–æ–π—Ç–µ** `resultsChan`,
// // —á—Ç–æ–±—ã ¬´—Å–∫–∞–∑–∞—Ç—å¬ª —á–∏—Ç–∞—é—â–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç.
// // - **–í —Ñ—É–Ω–∫—Ü–∏–∏ `main()`:**
// //     - –û–±—ä—è–≤–∏—Ç–µ –¥–≤–∞ –∫–∞–Ω–∞–ª–∞: `ordersChan := make(chan Order)` –∏ `resultsChan := make(chan string)`.
// //     - **–ó–∞–ø—É—Å—Ç–∏—Ç–µ** ¬´–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞¬ª (—Ñ—É–Ω–∫—Ü–∏—é `supplier`) —á–µ—Ä–µ–∑ `go supplier(ordersChan)`.
// //     - **–ó–∞–ø—É—Å—Ç–∏—Ç–µ** ¬´—Å–∫–ª–∞–¥¬ª (—Ñ—É–Ω–∫—Ü–∏—é `warehouse`) —á–µ—Ä–µ–∑ `go warehouse(ordersChan, resultsChan)`.
// //     - –í `main()` —Å–¥–µ–ª–∞–π—Ç–µ —Ü–∏–∫–ª `for msg := range resultsChan`, –≥–¥–µ `msg` ‚Äî —Å—Ç—Ä–æ–∫–∏, –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –æ—Ç ¬´—Å–∫–ª–∞–¥–∞¬ª. –í—ã–≤–æ–¥–∏—Ç–µ –∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å.
// //     - –ö–æ–≥–¥–∞ –∫–∞–Ω–∞–ª `resultsChan` –∑–∞–∫—Ä–æ–µ—Ç—Å—è, —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ä–∞–±–æ—Ç—É.
// // - **(–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ) –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏:**
// //     - –í `supplier` –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Äî `time.Sleep(300 * time.Millisecond)`.
// //     - –í `warehouse` –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–∫–∞–∑–∞ ‚Äî `time.Sleep(500 * time.Millisecond)`.

// type Order struct {
// 	ID       int
// 	Quantity int
// }

// func supplier(ordersChan chan<- Order) {
// 	for i := 1; i <= 5; i++ {
// 		ordersChan <- Order{ID: i, Quantity: i * 2}
// 		time.Sleep(300 * time.Millisecond)
// 	}
// 	close(ordersChan)
// }

// func warehouse(ordersChan <-chan Order, resultsChan chan<- string) {
// 	stock := 20
// 	for order := range ordersChan {
// 		time.Sleep(500 * time.Millisecond)
// 		if stock >= order.Quantity {
// 			stock -= order.Quantity
// 			resultsChan <- fmt.Sprintf("Order %d processed, left %d items", order.ID, stock)
// 		} else {
// 			resultsChan <- fmt.Sprintf("Order %d rejected: not enough items", order.ID)
// 		}
// 	}
// 	close(resultsChan)
// }

// func main() {
// 	ordersChan := make(chan Order)
// 	resultsChan := make(chan string)

// 	go supplier(ordersChan)
// 	go warehouse(ordersChan, resultsChan)

// 	for msg := range resultsChan {
// 		fmt.Println(msg)
// 	}
// }
